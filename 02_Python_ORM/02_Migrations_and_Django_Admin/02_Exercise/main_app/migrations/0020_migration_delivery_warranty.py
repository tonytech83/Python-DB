# Generated by Django 4.2.4 on 2023-10-30 17:42

from django.db import migrations
from django.utils import timezone


def update_delivery_warranty(apps, schema_editor):
    order_model = apps.get_model('main_app', 'Order')
    orders = order_model.objects.all()

    orders_to_delete = []
    orders_to_update = []

    for rec in orders:
        if rec.status == "Pending":
            rec.delivery = rec.order_date + timezone.timedelta(days=3)
            orders_to_update.append(rec)
        elif rec.status == "Completed":
            rec.warranty = "24 months"
            orders_to_update.append(rec)
        elif rec.status == "Cancelled":
            orders_to_delete.append(rec)

    if orders_to_delete:
        # pk__in=[o.pk for o in orders_to_delete] - takes primary keys of orders in list and
        # store them in specific list type
        #
        # filter - method in Django which returns new QuerySet
        #
        # filter(pk__in=[o.pk for o in orders_to_delete]).delete() - deletes all orders with
        # primary key from list "orders_to_delete"
        order_model.objects.filter(pk__in=[o.pk for o in orders_to_delete]).delete()
    if orders_to_update:
        order_model.objects.bulk_update(orders_to_update, ['delivery', 'warranty'])


def reverse_delivery_warranty(apps, schema_editor):
    order_model = apps.get_model('main_app', 'Order')
    orders = order_model.objects.all()

    default_delivery = None
    default_warranty = order_model._meta.get_field('warranty').default

    for rec in orders:
        rec.delivery = default_delivery
        rec.warranty = default_warranty

    order_model.objects.bulk_update(orders, ['delivery', 'warranty'])


class Migration(migrations.Migration):
    dependencies = [
        ('main_app', '0019_order'),
    ]

    operations = [
        migrations.RunPython(update_delivery_warranty, reverse_code=reverse_delivery_warranty)
    ]
